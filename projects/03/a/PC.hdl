// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
    //1. 每个if条件对应一个选择器Mux
    //2. if有优先级，对应的选择器也有先后顺序。
    //3. 选择器先后顺序：inc,load,reset (若reset为true，直接输出0，表示reset对应的选择器在最后面(不考虑寄存器))
    // 3.1 inc选择器:a=preOut,b=preOut+1,sel=inc
    // 3.2 load选择器:a=inc的输出，b=in,sel=load
    // 3.3 reset选择器：a=load的输出，b=false,sel=reset
    //4. 寄存器只有一个输入，且做存储的作用，所以值会一直被写，区别是写的是新值还是上次的旧值。所以Register的load为true。
    // 4.1 Register的位置是可变的，可以放在inc，load，reset三个选择器的任意位置 inc前，inc后，load后，reset后。要保证选择器的先后顺序不变。
    // 4.2 Register的输入就是前面的选择器的输出，如果放在inc前输入就是reset的输出，需要reset额外定义一个内部管脚为preOut

    Register(in=outReset,load=true,out=out,out=preOut);
    Mux16(a=outLoad,b=false,sel=reset,out=outReset);
    Mux16(a=outInc,b=in,sel=load,out=outLoad);
    Inc16(in=preOut,out=outInc16);
    Mux16(a=preOut,b=outInc16,sel=inc,out=outInc);
}
