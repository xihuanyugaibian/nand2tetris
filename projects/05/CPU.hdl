// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //如果sel是1，就是C指令，a=in，isC=1 isA=0，isC和isA总有一个对的，sel=0同理，总有一个是对的一个是错的。
    DMux(in=true,sel=instruction[15],a=isC,b=isA);


    //如果是A指令，或者是C指令但是指令
    And(a[0..15]=isA,b=instruction,out=A);
    //如果是C指令
    And(a=isC,b=instruction[3],out=isM);
    And(a=isC,b=instruction[4],out=zx);
    And(a=isC,b=instruction[5],out=nx);
    And(a=isC,b=instruction[6],out=zy);
    And(a=isC,b=instruction[7],out=ny);
    And(a=isC,b=instruction[8],out=f);
    And(a=isC,b=instruction[9],out=no);
    And(a=isC,b=instruction[10],out=destA);
    And(a=isC,b=instruction[11],out=destD);
    And(a=isC,b=instruction[12],out=destM);
    And(a=isC,b=instruction[13],out=jlt);
    And(a=isC,b=instruction[14],out=jeq);
    And(a=isC,b=instruction[15],out=jgt);
    And16(a[0..15]=isC,b[10..12]=instruction[10..12],out=dest);
    And16(a[0..15]=isC,b[13..15]=instruction[13..15],out=jump);

    //对于第一个选择器，是ALU的输出还是instruction作为A寄存器的输入 由控制单元决定，控制单元是由C指令解析出来的。
    Mux16(a=outAlu,b=instruction,sel=destA,out=firstMux);
    //对于A寄存器，如果指令是A指令或则和instruction[10]为1的C指令的C指令。
    Or(a=isA,b=destA,out=loadA);
    ARegister(in=firstMux,load=loadA,out=outA);
    //对于A/M选择器
    Mux16(a=outA,b=inM,sel=isM,out=outAM)

    //对于ALU
    ALU(x=outD,y=outAM,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,ng=ng,zr=zr,out=outM,out=outAlu);

    //对于D寄存器
    DRegister(in=outAlu,load=destD,out=outD);
    Mux16(a=outD,b=instruction)



    PC(in=  ,load=jump,inc=true,reset=reset,out=pc);
}
